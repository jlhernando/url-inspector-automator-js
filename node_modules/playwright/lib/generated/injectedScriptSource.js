"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.source = void 0;
exports.source = "var pwExport =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/server/injected/injectedScript.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/webpack/buildin/global.js\":\n/*!***********************************!*\\\n  !*** (webpack)/buildin/global.js ***!\n  \\***********************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n\n/***/ \"./src/server/common/cssParser.ts\":\n/*!****************************************!*\\\n  !*** ./src/server/common/cssParser.ts ***!\n  \\****************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeSelector = exports.parseCSS = void 0;\nconst css = __webpack_require__(/*! ./cssTokenizer */ \"./src/server/common/cssTokenizer.js\");\nfunction parseCSS(selector, customNames) {\n    let tokens;\n    try {\n        tokens = css.tokenize(selector);\n        if (!(tokens[tokens.length - 1] instanceof css.EOFToken))\n            tokens.push(new css.EOFToken());\n    }\n    catch (e) {\n        const newMessage = e.message + ` while parsing selector \"${selector}\"`;\n        const index = (e.stack || '').indexOf(e.message);\n        if (index !== -1)\n            e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n        e.message = newMessage;\n        throw e;\n    }\n    const unsupportedToken = tokens.find(token => {\n        return (token instanceof css.AtKeywordToken) ||\n            (token instanceof css.BadStringToken) ||\n            (token instanceof css.BadURLToken) ||\n            (token instanceof css.ColumnToken) ||\n            (token instanceof css.CDOToken) ||\n            (token instanceof css.CDCToken) ||\n            (token instanceof css.SemicolonToken) ||\n            // TODO: Consider using these for something, e.g. to escape complex strings.\n            // For example :xpath{ (//div/bar[@attr=\"foo\"])[2]/baz }\n            // Or this way :xpath( {complex-xpath-goes-here(\"hello\")} )\n            (token instanceof css.OpenCurlyToken) ||\n            (token instanceof css.CloseCurlyToken) ||\n            // TODO: Consider treating these as strings?\n            (token instanceof css.URLToken) ||\n            (token instanceof css.PercentageToken);\n    });\n    if (unsupportedToken)\n        throw new Error(`Unsupported token \"${unsupportedToken.toSource()}\" while parsing selector \"${selector}\"`);\n    let pos = 0;\n    const names = new Set();\n    function unexpected() {\n        return new Error(`Unexpected token \"${tokens[pos].toSource()}\" while parsing selector \"${selector}\"`);\n    }\n    function skipWhitespace() {\n        while (tokens[pos] instanceof css.WhitespaceToken)\n            pos++;\n    }\n    function isIdent(p = pos) {\n        return tokens[p] instanceof css.IdentToken;\n    }\n    function isString(p = pos) {\n        return tokens[p] instanceof css.StringToken;\n    }\n    function isNumber(p = pos) {\n        return tokens[p] instanceof css.NumberToken;\n    }\n    function isComma(p = pos) {\n        return tokens[p] instanceof css.CommaToken;\n    }\n    function isCloseParen(p = pos) {\n        return tokens[p] instanceof css.CloseParenToken;\n    }\n    function isStar(p = pos) {\n        return (tokens[p] instanceof css.DelimToken) && tokens[p].value === '*';\n    }\n    function isEOF(p = pos) {\n        return tokens[p] instanceof css.EOFToken;\n    }\n    function isClauseCombinator(p = pos) {\n        return (tokens[p] instanceof css.DelimToken) && (['>', '+', '~'].includes(tokens[p].value));\n    }\n    function isSelectorClauseEnd(p = pos) {\n        return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || (tokens[p] instanceof css.WhitespaceToken);\n    }\n    function consumeFunctionArguments() {\n        const result = [consumeArgument()];\n        while (true) {\n            skipWhitespace();\n            if (!isComma())\n                break;\n            pos++;\n            result.push(consumeArgument());\n        }\n        return result;\n    }\n    function consumeArgument() {\n        skipWhitespace();\n        if (isNumber())\n            return tokens[pos++].value;\n        if (isString())\n            return tokens[pos++].value;\n        return consumeComplexSelector();\n    }\n    function consumeComplexSelector() {\n        skipWhitespace();\n        const result = { simples: [{ selector: consumeSimpleSelector(), combinator: '' }] };\n        while (true) {\n            skipWhitespace();\n            if (isClauseCombinator()) {\n                result.simples[result.simples.length - 1].combinator = tokens[pos++].value;\n                skipWhitespace();\n            }\n            else if (isSelectorClauseEnd()) {\n                break;\n            }\n            result.simples.push({ combinator: '', selector: consumeSimpleSelector() });\n        }\n        return result;\n    }\n    function consumeSimpleSelector() {\n        let rawCSSString = '';\n        const functions = [];\n        while (!isSelectorClauseEnd()) {\n            if (isIdent() || isStar()) {\n                rawCSSString += tokens[pos++].toSource();\n            }\n            else if (tokens[pos] instanceof css.HashToken) {\n                rawCSSString += tokens[pos++].toSource();\n            }\n            else if ((tokens[pos] instanceof css.DelimToken) && tokens[pos].value === '.') {\n                pos++;\n                if (isIdent())\n                    rawCSSString += '.' + tokens[pos++].toSource();\n                else\n                    throw unexpected();\n            }\n            else if (tokens[pos] instanceof css.ColonToken) {\n                pos++;\n                if (isIdent()) {\n                    if (!customNames.has(tokens[pos].value.toLowerCase())) {\n                        rawCSSString += ':' + tokens[pos++].toSource();\n                    }\n                    else {\n                        const name = tokens[pos++].value.toLowerCase();\n                        functions.push({ name, args: [] });\n                        names.add(name);\n                    }\n                }\n                else if (tokens[pos] instanceof css.FunctionToken) {\n                    const name = tokens[pos++].value.toLowerCase();\n                    if (!customNames.has(name)) {\n                        rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n                    }\n                    else {\n                        functions.push({ name, args: consumeFunctionArguments() });\n                        names.add(name);\n                    }\n                    skipWhitespace();\n                    if (!isCloseParen())\n                        throw unexpected();\n                    pos++;\n                }\n                else {\n                    throw unexpected();\n                }\n            }\n            else if (tokens[pos] instanceof css.OpenSquareToken) {\n                rawCSSString += '[';\n                pos++;\n                while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF())\n                    rawCSSString += tokens[pos++].toSource();\n                if (!(tokens[pos] instanceof css.CloseSquareToken))\n                    throw unexpected();\n                rawCSSString += ']';\n                pos++;\n            }\n            else {\n                throw unexpected();\n            }\n        }\n        if (!rawCSSString && !functions.length)\n            throw unexpected();\n        return { css: rawCSSString || undefined, functions };\n    }\n    function consumeBuiltinFunctionArguments() {\n        let s = '';\n        while (!isCloseParen() && !isEOF())\n            s += tokens[pos++].toSource();\n        return s;\n    }\n    const result = consumeFunctionArguments();\n    if (!isEOF())\n        throw new Error(`Error while parsing selector \"${selector}\"`);\n    if (result.some(arg => typeof arg !== 'object' || !('simples' in arg)))\n        throw new Error(`Error while parsing selector \"${selector}\"`);\n    return { selector: result, names: Array.from(names) };\n}\nexports.parseCSS = parseCSS;\nfunction serializeSelector(args) {\n    return args.map(arg => {\n        if (typeof arg === 'string')\n            return `\"${arg}\"`;\n        if (typeof arg === 'number')\n            return String(arg);\n        return arg.simples.map(({ selector, combinator }) => {\n            let s = selector.css || '';\n            s = s + selector.functions.map(func => `:${func.name}(${serializeSelector(func.args)})`).join('');\n            if (combinator)\n                s += ' ' + combinator;\n            return s;\n        }).join(' ');\n    }).join(', ');\n}\nexports.serializeSelector = serializeSelector;\n\n\n/***/ }),\n\n/***/ \"./src/server/common/cssTokenizer.js\":\n/*!*******************************************!*\\\n  !*** ./src/server/common/cssTokenizer.js ***!\n  \\*******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/*\n * Original at https://github.com/tabatkins/parse-css\n * licensed under http://creativecommons.org/publicdomain/zero/1.0/\n *\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Changes from https://github.com/tabatkins/parse-css\n//   - Tabs are replaced with two spaces.\n//   - Everything not related to tokenizing - below the first exports block - is removed.\n// @ts-nocheck\n(function (root, factory) {\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    else {}\n}(this, function (exports) {\n    var between = function (num, first, last) { return num >= first && num <= last; };\n    function digit(code) { return between(code, 0x30, 0x39); }\n    function hexdigit(code) { return digit(code) || between(code, 0x41, 0x46) || between(code, 0x61, 0x66); }\n    function uppercaseletter(code) { return between(code, 0x41, 0x5a); }\n    function lowercaseletter(code) { return between(code, 0x61, 0x7a); }\n    function letter(code) { return uppercaseletter(code) || lowercaseletter(code); }\n    function nonascii(code) { return code >= 0x80; }\n    function namestartchar(code) { return letter(code) || nonascii(code) || code == 0x5f; }\n    function namechar(code) { return namestartchar(code) || digit(code) || code == 0x2d; }\n    function nonprintable(code) { return between(code, 0, 8) || code == 0xb || between(code, 0xe, 0x1f) || code == 0x7f; }\n    function newline(code) { return code == 0xa; }\n    function whitespace(code) { return newline(code) || code == 9 || code == 0x20; }\n    function badescape(code) { return newline(code) || isNaN(code); }\n    var maximumallowedcodepoint = 0x10ffff;\n    var InvalidCharacterError = function (message) {\n        this.message = message;\n    };\n    InvalidCharacterError.prototype = new Error;\n    InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n    function preprocess(str) {\n        // Turn a string into an array of code points,\n        // following the preprocessing cleanup rules.\n        var codepoints = [];\n        for (var i = 0; i < str.length; i++) {\n            var code = str.charCodeAt(i);\n            if (code == 0xd && str.charCodeAt(i + 1) == 0xa) {\n                code = 0xa;\n                i++;\n            }\n            if (code == 0xd || code == 0xc)\n                code = 0xa;\n            if (code == 0x0)\n                code = 0xfffd;\n            if (between(code, 0xd800, 0xdbff) && between(str.charCodeAt(i + 1), 0xdc00, 0xdfff)) {\n                // Decode a surrogate pair into an astral codepoint.\n                var lead = code - 0xd800;\n                var trail = str.charCodeAt(i + 1) - 0xdc00;\n                code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n                i++;\n            }\n            codepoints.push(code);\n        }\n        return codepoints;\n    }\n    function stringFromCode(code) {\n        if (code <= 0xffff)\n            return String.fromCharCode(code);\n        // Otherwise, encode astral char as surrogate pair.\n        code -= Math.pow(2, 16);\n        var lead = Math.floor(code / Math.pow(2, 10)) + 0xd800;\n        var trail = code % Math.pow(2, 10) + 0xdc00;\n        return String.fromCharCode(lead) + String.fromCharCode(trail);\n    }\n    function tokenize(str) {\n        str = preprocess(str);\n        var i = -1;\n        var tokens = [];\n        var code;\n        // Line number information.\n        var line = 0;\n        var column = 0;\n        // The only use of lastLineLength is in reconsume().\n        var lastLineLength = 0;\n        var incrLineno = function () {\n            line += 1;\n            lastLineLength = column;\n            column = 0;\n        };\n        var locStart = { line: line, column: column };\n        var codepoint = function (i) {\n            if (i >= str.length) {\n                return -1;\n            }\n            return str[i];\n        };\n        var next = function (num) {\n            if (num === undefined)\n                num = 1;\n            if (num > 3)\n                throw \"Spec Error: no more than three codepoints of lookahead.\";\n            return codepoint(i + num);\n        };\n        var consume = function (num) {\n            if (num === undefined)\n                num = 1;\n            i += num;\n            code = codepoint(i);\n            if (newline(code))\n                incrLineno();\n            else\n                column += num;\n            //console.log('Consume '+i+' '+String.fromCharCode(code) + ' 0x' + code.toString(16));\n            return true;\n        };\n        var reconsume = function () {\n            i -= 1;\n            if (newline(code)) {\n                line -= 1;\n                column = lastLineLength;\n            }\n            else {\n                column -= 1;\n            }\n            locStart.line = line;\n            locStart.column = column;\n            return true;\n        };\n        var eof = function (codepoint) {\n            if (codepoint === undefined)\n                codepoint = code;\n            return codepoint == -1;\n        };\n        var donothing = function () { };\n        var parseerror = function () { console.log(\"Parse error at index \" + i + \", processing codepoint 0x\" + code.toString(16) + \".\"); return true; };\n        var consumeAToken = function () {\n            consumeComments();\n            consume();\n            if (whitespace(code)) {\n                while (whitespace(next()))\n                    consume();\n                return new WhitespaceToken;\n            }\n            else if (code == 0x22)\n                return consumeAStringToken();\n            else if (code == 0x23) {\n                if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n                    var token = new HashToken();\n                    if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n                        token.type = \"id\";\n                    token.value = consumeAName();\n                    return token;\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x24) {\n                if (next() == 0x3d) {\n                    consume();\n                    return new SuffixMatchToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x27)\n                return consumeAStringToken();\n            else if (code == 0x28)\n                return new OpenParenToken();\n            else if (code == 0x29)\n                return new CloseParenToken();\n            else if (code == 0x2a) {\n                if (next() == 0x3d) {\n                    consume();\n                    return new SubstringMatchToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x2b) {\n                if (startsWithANumber()) {\n                    reconsume();\n                    return consumeANumericToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x2c)\n                return new CommaToken();\n            else if (code == 0x2d) {\n                if (startsWithANumber()) {\n                    reconsume();\n                    return consumeANumericToken();\n                }\n                else if (next(1) == 0x2d && next(2) == 0x3e) {\n                    consume(2);\n                    return new CDCToken();\n                }\n                else if (startsWithAnIdentifier()) {\n                    reconsume();\n                    return consumeAnIdentlikeToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x2e) {\n                if (startsWithANumber()) {\n                    reconsume();\n                    return consumeANumericToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x3a)\n                return new ColonToken;\n            else if (code == 0x3b)\n                return new SemicolonToken;\n            else if (code == 0x3c) {\n                if (next(1) == 0x21 && next(2) == 0x2d && next(3) == 0x2d) {\n                    consume(3);\n                    return new CDOToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x40) {\n                if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n                    return new AtKeywordToken(consumeAName());\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x5b)\n                return new OpenSquareToken();\n            else if (code == 0x5c) {\n                if (startsWithAValidEscape()) {\n                    reconsume();\n                    return consumeAnIdentlikeToken();\n                }\n                else {\n                    parseerror();\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x5d)\n                return new CloseSquareToken();\n            else if (code == 0x5e) {\n                if (next() == 0x3d) {\n                    consume();\n                    return new PrefixMatchToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x7b)\n                return new OpenCurlyToken();\n            else if (code == 0x7c) {\n                if (next() == 0x3d) {\n                    consume();\n                    return new DashMatchToken();\n                }\n                else if (next() == 0x7c) {\n                    consume();\n                    return new ColumnToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (code == 0x7d)\n                return new CloseCurlyToken();\n            else if (code == 0x7e) {\n                if (next() == 0x3d) {\n                    consume();\n                    return new IncludeMatchToken();\n                }\n                else {\n                    return new DelimToken(code);\n                }\n            }\n            else if (digit(code)) {\n                reconsume();\n                return consumeANumericToken();\n            }\n            else if (namestartchar(code)) {\n                reconsume();\n                return consumeAnIdentlikeToken();\n            }\n            else if (eof())\n                return new EOFToken();\n            else\n                return new DelimToken(code);\n        };\n        var consumeComments = function () {\n            while (next(1) == 0x2f && next(2) == 0x2a) {\n                consume(2);\n                while (true) {\n                    consume();\n                    if (code == 0x2a && next() == 0x2f) {\n                        consume();\n                        break;\n                    }\n                    else if (eof()) {\n                        parseerror();\n                        return;\n                    }\n                }\n            }\n        };\n        var consumeANumericToken = function () {\n            var num = consumeANumber();\n            if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n                var token = new DimensionToken();\n                token.value = num.value;\n                token.repr = num.repr;\n                token.type = num.type;\n                token.unit = consumeAName();\n                return token;\n            }\n            else if (next() == 0x25) {\n                consume();\n                var token = new PercentageToken();\n                token.value = num.value;\n                token.repr = num.repr;\n                return token;\n            }\n            else {\n                var token = new NumberToken();\n                token.value = num.value;\n                token.repr = num.repr;\n                token.type = num.type;\n                return token;\n            }\n        };\n        var consumeAnIdentlikeToken = function () {\n            var str = consumeAName();\n            if (str.toLowerCase() == \"url\" && next() == 0x28) {\n                consume();\n                while (whitespace(next(1)) && whitespace(next(2)))\n                    consume();\n                if (next() == 0x22 || next() == 0x27) {\n                    return new FunctionToken(str);\n                }\n                else if (whitespace(next()) && (next(2) == 0x22 || next(2) == 0x27)) {\n                    return new FunctionToken(str);\n                }\n                else {\n                    return consumeAURLToken();\n                }\n            }\n            else if (next() == 0x28) {\n                consume();\n                return new FunctionToken(str);\n            }\n            else {\n                return new IdentToken(str);\n            }\n        };\n        var consumeAStringToken = function (endingCodePoint) {\n            if (endingCodePoint === undefined)\n                endingCodePoint = code;\n            var string = \"\";\n            while (consume()) {\n                if (code == endingCodePoint || eof()) {\n                    return new StringToken(string);\n                }\n                else if (newline(code)) {\n                    parseerror();\n                    reconsume();\n                    return new BadStringToken();\n                }\n                else if (code == 0x5c) {\n                    if (eof(next())) {\n                        donothing();\n                    }\n                    else if (newline(next())) {\n                        consume();\n                    }\n                    else {\n                        string += stringFromCode(consumeEscape());\n                    }\n                }\n                else {\n                    string += stringFromCode(code);\n                }\n            }\n        };\n        var consumeAURLToken = function () {\n            var token = new URLToken(\"\");\n            while (whitespace(next()))\n                consume();\n            if (eof(next()))\n                return token;\n            while (consume()) {\n                if (code == 0x29 || eof()) {\n                    return token;\n                }\n                else if (whitespace(code)) {\n                    while (whitespace(next()))\n                        consume();\n                    if (next() == 0x29 || eof(next())) {\n                        consume();\n                        return token;\n                    }\n                    else {\n                        consumeTheRemnantsOfABadURL();\n                        return new BadURLToken();\n                    }\n                }\n                else if (code == 0x22 || code == 0x27 || code == 0x28 || nonprintable(code)) {\n                    parseerror();\n                    consumeTheRemnantsOfABadURL();\n                    return new BadURLToken();\n                }\n                else if (code == 0x5c) {\n                    if (startsWithAValidEscape()) {\n                        token.value += stringFromCode(consumeEscape());\n                    }\n                    else {\n                        parseerror();\n                        consumeTheRemnantsOfABadURL();\n                        return new BadURLToken();\n                    }\n                }\n                else {\n                    token.value += stringFromCode(code);\n                }\n            }\n        };\n        var consumeEscape = function () {\n            // Assume the the current character is the \\\n            // and the next code point is not a newline.\n            consume();\n            if (hexdigit(code)) {\n                // Consume 1-6 hex digits\n                var digits = [code];\n                for (var total = 0; total < 5; total++) {\n                    if (hexdigit(next())) {\n                        consume();\n                        digits.push(code);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (whitespace(next()))\n                    consume();\n                var value = parseInt(digits.map(function (x) { return String.fromCharCode(x); }).join(''), 16);\n                if (value > maximumallowedcodepoint)\n                    value = 0xfffd;\n                return value;\n            }\n            else if (eof()) {\n                return 0xfffd;\n            }\n            else {\n                return code;\n            }\n        };\n        var areAValidEscape = function (c1, c2) {\n            if (c1 != 0x5c)\n                return false;\n            if (newline(c2))\n                return false;\n            return true;\n        };\n        var startsWithAValidEscape = function () {\n            return areAValidEscape(code, next());\n        };\n        var wouldStartAnIdentifier = function (c1, c2, c3) {\n            if (c1 == 0x2d) {\n                return namestartchar(c2) || c2 == 0x2d || areAValidEscape(c2, c3);\n            }\n            else if (namestartchar(c1)) {\n                return true;\n            }\n            else if (c1 == 0x5c) {\n                return areAValidEscape(c1, c2);\n            }\n            else {\n                return false;\n            }\n        };\n        var startsWithAnIdentifier = function () {\n            return wouldStartAnIdentifier(code, next(1), next(2));\n        };\n        var wouldStartANumber = function (c1, c2, c3) {\n            if (c1 == 0x2b || c1 == 0x2d) {\n                if (digit(c2))\n                    return true;\n                if (c2 == 0x2e && digit(c3))\n                    return true;\n                return false;\n            }\n            else if (c1 == 0x2e) {\n                if (digit(c2))\n                    return true;\n                return false;\n            }\n            else if (digit(c1)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        var startsWithANumber = function () {\n            return wouldStartANumber(code, next(1), next(2));\n        };\n        var consumeAName = function () {\n            var result = \"\";\n            while (consume()) {\n                if (namechar(code)) {\n                    result += stringFromCode(code);\n                }\n                else if (startsWithAValidEscape()) {\n                    result += stringFromCode(consumeEscape());\n                }\n                else {\n                    reconsume();\n                    return result;\n                }\n            }\n        };\n        var consumeANumber = function () {\n            var repr = [];\n            var type = \"integer\";\n            if (next() == 0x2b || next() == 0x2d) {\n                consume();\n                repr += stringFromCode(code);\n            }\n            while (digit(next())) {\n                consume();\n                repr += stringFromCode(code);\n            }\n            if (next(1) == 0x2e && digit(next(2))) {\n                consume();\n                repr += stringFromCode(code);\n                consume();\n                repr += stringFromCode(code);\n                type = \"number\";\n                while (digit(next())) {\n                    consume();\n                    repr += stringFromCode(code);\n                }\n            }\n            var c1 = next(1), c2 = next(2), c3 = next(3);\n            if ((c1 == 0x45 || c1 == 0x65) && digit(c2)) {\n                consume();\n                repr += stringFromCode(code);\n                consume();\n                repr += stringFromCode(code);\n                type = \"number\";\n                while (digit(next())) {\n                    consume();\n                    repr += stringFromCode(code);\n                }\n            }\n            else if ((c1 == 0x45 || c1 == 0x65) && (c2 == 0x2b || c2 == 0x2d) && digit(c3)) {\n                consume();\n                repr += stringFromCode(code);\n                consume();\n                repr += stringFromCode(code);\n                consume();\n                repr += stringFromCode(code);\n                type = \"number\";\n                while (digit(next())) {\n                    consume();\n                    repr += stringFromCode(code);\n                }\n            }\n            var value = convertAStringToANumber(repr);\n            return { type: type, value: value, repr: repr };\n        };\n        var convertAStringToANumber = function (string) {\n            // CSS's number rules are identical to JS, afaik.\n            return +string;\n        };\n        var consumeTheRemnantsOfABadURL = function () {\n            while (consume()) {\n                if (code == 0x29 || eof()) {\n                    return;\n                }\n                else if (startsWithAValidEscape()) {\n                    consumeEscape();\n                    donothing();\n                }\n                else {\n                    donothing();\n                }\n            }\n        };\n        var iterationCount = 0;\n        while (!eof(next())) {\n            tokens.push(consumeAToken());\n            iterationCount++;\n            if (iterationCount > str.length * 2)\n                return \"I'm infinite-looping!\";\n        }\n        return tokens;\n    }\n    function CSSParserToken() { throw \"Abstract Base Class\"; }\n    CSSParserToken.prototype.toJSON = function () {\n        return { token: this.tokenType };\n    };\n    CSSParserToken.prototype.toString = function () { return this.tokenType; };\n    CSSParserToken.prototype.toSource = function () { return '' + this; };\n    function BadStringToken() { return this; }\n    BadStringToken.prototype = Object.create(CSSParserToken.prototype);\n    BadStringToken.prototype.tokenType = \"BADSTRING\";\n    function BadURLToken() { return this; }\n    BadURLToken.prototype = Object.create(CSSParserToken.prototype);\n    BadURLToken.prototype.tokenType = \"BADURL\";\n    function WhitespaceToken() { return this; }\n    WhitespaceToken.prototype = Object.create(CSSParserToken.prototype);\n    WhitespaceToken.prototype.tokenType = \"WHITESPACE\";\n    WhitespaceToken.prototype.toString = function () { return \"WS\"; };\n    WhitespaceToken.prototype.toSource = function () { return \" \"; };\n    function CDOToken() { return this; }\n    CDOToken.prototype = Object.create(CSSParserToken.prototype);\n    CDOToken.prototype.tokenType = \"CDO\";\n    CDOToken.prototype.toSource = function () { return \"<!--\"; };\n    function CDCToken() { return this; }\n    CDCToken.prototype = Object.create(CSSParserToken.prototype);\n    CDCToken.prototype.tokenType = \"CDC\";\n    CDCToken.prototype.toSource = function () { return \"-->\"; };\n    function ColonToken() { return this; }\n    ColonToken.prototype = Object.create(CSSParserToken.prototype);\n    ColonToken.prototype.tokenType = \":\";\n    function SemicolonToken() { return this; }\n    SemicolonToken.prototype = Object.create(CSSParserToken.prototype);\n    SemicolonToken.prototype.tokenType = \";\";\n    function CommaToken() { return this; }\n    CommaToken.prototype = Object.create(CSSParserToken.prototype);\n    CommaToken.prototype.tokenType = \",\";\n    function GroupingToken() { throw \"Abstract Base Class\"; }\n    GroupingToken.prototype = Object.create(CSSParserToken.prototype);\n    function OpenCurlyToken() { this.value = \"{\"; this.mirror = \"}\"; return this; }\n    OpenCurlyToken.prototype = Object.create(GroupingToken.prototype);\n    OpenCurlyToken.prototype.tokenType = \"{\";\n    function CloseCurlyToken() { this.value = \"}\"; this.mirror = \"{\"; return this; }\n    CloseCurlyToken.prototype = Object.create(GroupingToken.prototype);\n    CloseCurlyToken.prototype.tokenType = \"}\";\n    function OpenSquareToken() { this.value = \"[\"; this.mirror = \"]\"; return this; }\n    OpenSquareToken.prototype = Object.create(GroupingToken.prototype);\n    OpenSquareToken.prototype.tokenType = \"[\";\n    function CloseSquareToken() { this.value = \"]\"; this.mirror = \"[\"; return this; }\n    CloseSquareToken.prototype = Object.create(GroupingToken.prototype);\n    CloseSquareToken.prototype.tokenType = \"]\";\n    function OpenParenToken() { this.value = \"(\"; this.mirror = \")\"; return this; }\n    OpenParenToken.prototype = Object.create(GroupingToken.prototype);\n    OpenParenToken.prototype.tokenType = \"(\";\n    function CloseParenToken() { this.value = \")\"; this.mirror = \"(\"; return this; }\n    CloseParenToken.prototype = Object.create(GroupingToken.prototype);\n    CloseParenToken.prototype.tokenType = \")\";\n    function IncludeMatchToken() { return this; }\n    IncludeMatchToken.prototype = Object.create(CSSParserToken.prototype);\n    IncludeMatchToken.prototype.tokenType = \"~=\";\n    function DashMatchToken() { return this; }\n    DashMatchToken.prototype = Object.create(CSSParserToken.prototype);\n    DashMatchToken.prototype.tokenType = \"|=\";\n    function PrefixMatchToken() { return this; }\n    PrefixMatchToken.prototype = Object.create(CSSParserToken.prototype);\n    PrefixMatchToken.prototype.tokenType = \"^=\";\n    function SuffixMatchToken() { return this; }\n    SuffixMatchToken.prototype = Object.create(CSSParserToken.prototype);\n    SuffixMatchToken.prototype.tokenType = \"$=\";\n    function SubstringMatchToken() { return this; }\n    SubstringMatchToken.prototype = Object.create(CSSParserToken.prototype);\n    SubstringMatchToken.prototype.tokenType = \"*=\";\n    function ColumnToken() { return this; }\n    ColumnToken.prototype = Object.create(CSSParserToken.prototype);\n    ColumnToken.prototype.tokenType = \"||\";\n    function EOFToken() { return this; }\n    EOFToken.prototype = Object.create(CSSParserToken.prototype);\n    EOFToken.prototype.tokenType = \"EOF\";\n    EOFToken.prototype.toSource = function () { return \"\"; };\n    function DelimToken(code) {\n        this.value = stringFromCode(code);\n        return this;\n    }\n    DelimToken.prototype = Object.create(CSSParserToken.prototype);\n    DelimToken.prototype.tokenType = \"DELIM\";\n    DelimToken.prototype.toString = function () { return \"DELIM(\" + this.value + \")\"; };\n    DelimToken.prototype.toJSON = function () {\n        var json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n        json.value = this.value;\n        return json;\n    };\n    DelimToken.prototype.toSource = function () {\n        if (this.value == \"\\\\\")\n            return \"\\\\\\n\";\n        else\n            return this.value;\n    };\n    function StringValuedToken() { throw \"Abstract Base Class\"; }\n    StringValuedToken.prototype = Object.create(CSSParserToken.prototype);\n    StringValuedToken.prototype.ASCIIMatch = function (str) {\n        return this.value.toLowerCase() == str.toLowerCase();\n    };\n    StringValuedToken.prototype.toJSON = function () {\n        var json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n        json.value = this.value;\n        return json;\n    };\n    function IdentToken(val) {\n        this.value = val;\n    }\n    IdentToken.prototype = Object.create(StringValuedToken.prototype);\n    IdentToken.prototype.tokenType = \"IDENT\";\n    IdentToken.prototype.toString = function () { return \"IDENT(\" + this.value + \")\"; };\n    IdentToken.prototype.toSource = function () {\n        return escapeIdent(this.value);\n    };\n    function FunctionToken(val) {\n        this.value = val;\n        this.mirror = \")\";\n    }\n    FunctionToken.prototype = Object.create(StringValuedToken.prototype);\n    FunctionToken.prototype.tokenType = \"FUNCTION\";\n    FunctionToken.prototype.toString = function () { return \"FUNCTION(\" + this.value + \")\"; };\n    FunctionToken.prototype.toSource = function () {\n        return escapeIdent(this.value) + \"(\";\n    };\n    function AtKeywordToken(val) {\n        this.value = val;\n    }\n    AtKeywordToken.prototype = Object.create(StringValuedToken.prototype);\n    AtKeywordToken.prototype.tokenType = \"AT-KEYWORD\";\n    AtKeywordToken.prototype.toString = function () { return \"AT(\" + this.value + \")\"; };\n    AtKeywordToken.prototype.toSource = function () {\n        return \"@\" + escapeIdent(this.value);\n    };\n    function HashToken(val) {\n        this.value = val;\n        this.type = \"unrestricted\";\n    }\n    HashToken.prototype = Object.create(StringValuedToken.prototype);\n    HashToken.prototype.tokenType = \"HASH\";\n    HashToken.prototype.toString = function () { return \"HASH(\" + this.value + \")\"; };\n    HashToken.prototype.toJSON = function () {\n        var json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n        json.value = this.value;\n        json.type = this.type;\n        return json;\n    };\n    HashToken.prototype.toSource = function () {\n        if (this.type == \"id\") {\n            return \"#\" + escapeIdent(this.value);\n        }\n        else {\n            return \"#\" + escapeHash(this.value);\n        }\n    };\n    function StringToken(val) {\n        this.value = val;\n    }\n    StringToken.prototype = Object.create(StringValuedToken.prototype);\n    StringToken.prototype.tokenType = \"STRING\";\n    StringToken.prototype.toString = function () {\n        return '\"' + escapeString(this.value) + '\"';\n    };\n    function URLToken(val) {\n        this.value = val;\n    }\n    URLToken.prototype = Object.create(StringValuedToken.prototype);\n    URLToken.prototype.tokenType = \"URL\";\n    URLToken.prototype.toString = function () { return \"URL(\" + this.value + \")\"; };\n    URLToken.prototype.toSource = function () {\n        return 'url(\"' + escapeString(this.value) + '\")';\n    };\n    function NumberToken() {\n        this.value = null;\n        this.type = \"integer\";\n        this.repr = \"\";\n    }\n    NumberToken.prototype = Object.create(CSSParserToken.prototype);\n    NumberToken.prototype.tokenType = \"NUMBER\";\n    NumberToken.prototype.toString = function () {\n        if (this.type == \"integer\")\n            return \"INT(\" + this.value + \")\";\n        return \"NUMBER(\" + this.value + \")\";\n    };\n    NumberToken.prototype.toJSON = function () {\n        var json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n        json.value = this.value;\n        json.type = this.type;\n        json.repr = this.repr;\n        return json;\n    };\n    NumberToken.prototype.toSource = function () { return this.repr; };\n    function PercentageToken() {\n        this.value = null;\n        this.repr = \"\";\n    }\n    PercentageToken.prototype = Object.create(CSSParserToken.prototype);\n    PercentageToken.prototype.tokenType = \"PERCENTAGE\";\n    PercentageToken.prototype.toString = function () { return \"PERCENTAGE(\" + this.value + \")\"; };\n    PercentageToken.prototype.toJSON = function () {\n        var json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n        json.value = this.value;\n        json.repr = this.repr;\n        return json;\n    };\n    PercentageToken.prototype.toSource = function () { return this.repr + \"%\"; };\n    function DimensionToken() {\n        this.value = null;\n        this.type = \"integer\";\n        this.repr = \"\";\n        this.unit = \"\";\n    }\n    DimensionToken.prototype = Object.create(CSSParserToken.prototype);\n    DimensionToken.prototype.tokenType = \"DIMENSION\";\n    DimensionToken.prototype.toString = function () { return \"DIM(\" + this.value + \",\" + this.unit + \")\"; };\n    DimensionToken.prototype.toJSON = function () {\n        var json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n        json.value = this.value;\n        json.type = this.type;\n        json.repr = this.repr;\n        json.unit = this.unit;\n        return json;\n    };\n    DimensionToken.prototype.toSource = function () {\n        var source = this.repr;\n        var unit = escapeIdent(this.unit);\n        if (unit[0].toLowerCase() == \"e\" && (unit[1] == \"-\" || between(unit.charCodeAt(1), 0x30, 0x39))) {\n            // Unit is ambiguous with scinot\n            // Remove the leading \"e\", replace with escape.\n            unit = \"\\\\65 \" + unit.slice(1, unit.length);\n        }\n        return source + unit;\n    };\n    function escapeIdent(string) {\n        string = '' + string;\n        var result = '';\n        var firstcode = string.charCodeAt(0);\n        for (var i = 0; i < string.length; i++) {\n            var code = string.charCodeAt(i);\n            if (code == 0x0) {\n                throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n            }\n            if (between(code, 0x1, 0x1f) || code == 0x7f ||\n                (i == 0 && between(code, 0x30, 0x39)) ||\n                (i == 1 && between(code, 0x30, 0x39) && firstcode == 0x2d)) {\n                result += '\\\\' + code.toString(16) + ' ';\n            }\n            else if (code >= 0x80 ||\n                code == 0x2d ||\n                code == 0x5f ||\n                between(code, 0x30, 0x39) ||\n                between(code, 0x41, 0x5a) ||\n                between(code, 0x61, 0x7a)) {\n                result += string[i];\n            }\n            else {\n                result += '\\\\' + string[i];\n            }\n        }\n        return result;\n    }\n    function escapeHash(string) {\n        // Escapes the contents of \"unrestricted\"-type hash tokens.\n        // Won't preserve the ID-ness of \"id\"-type hash tokens;\n        // use escapeIdent() for that.\n        string = '' + string;\n        var result = '';\n        var firstcode = string.charCodeAt(0);\n        for (var i = 0; i < string.length; i++) {\n            var code = string.charCodeAt(i);\n            if (code == 0x0) {\n                throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n            }\n            if (code >= 0x80 ||\n                code == 0x2d ||\n                code == 0x5f ||\n                between(code, 0x30, 0x39) ||\n                between(code, 0x41, 0x5a) ||\n                between(code, 0x61, 0x7a)) {\n                result += string[i];\n            }\n            else {\n                result += '\\\\' + code.toString(16) + ' ';\n            }\n        }\n        return result;\n    }\n    function escapeString(string) {\n        string = '' + string;\n        var result = '';\n        for (var i = 0; i < string.length; i++) {\n            var code = string.charCodeAt(i);\n            if (code == 0x0) {\n                throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n            }\n            if (between(code, 0x1, 0x1f) || code == 0x7f) {\n                result += '\\\\' + code.toString(16) + ' ';\n            }\n            else if (code == 0x22 || code == 0x5c) {\n                result += '\\\\' + string[i];\n            }\n            else {\n                result += string[i];\n            }\n        }\n        return result;\n    }\n    // Exportation.\n    exports.tokenize = tokenize;\n    exports.IdentToken = IdentToken;\n    exports.FunctionToken = FunctionToken;\n    exports.AtKeywordToken = AtKeywordToken;\n    exports.HashToken = HashToken;\n    exports.StringToken = StringToken;\n    exports.BadStringToken = BadStringToken;\n    exports.URLToken = URLToken;\n    exports.BadURLToken = BadURLToken;\n    exports.DelimToken = DelimToken;\n    exports.NumberToken = NumberToken;\n    exports.PercentageToken = PercentageToken;\n    exports.DimensionToken = DimensionToken;\n    exports.IncludeMatchToken = IncludeMatchToken;\n    exports.DashMatchToken = DashMatchToken;\n    exports.PrefixMatchToken = PrefixMatchToken;\n    exports.SuffixMatchToken = SuffixMatchToken;\n    exports.SubstringMatchToken = SubstringMatchToken;\n    exports.ColumnToken = ColumnToken;\n    exports.WhitespaceToken = WhitespaceToken;\n    exports.CDOToken = CDOToken;\n    exports.CDCToken = CDCToken;\n    exports.ColonToken = ColonToken;\n    exports.SemicolonToken = SemicolonToken;\n    exports.CommaToken = CommaToken;\n    exports.OpenParenToken = OpenParenToken;\n    exports.CloseParenToken = CloseParenToken;\n    exports.OpenSquareToken = OpenSquareToken;\n    exports.CloseSquareToken = CloseSquareToken;\n    exports.OpenCurlyToken = OpenCurlyToken;\n    exports.CloseCurlyToken = CloseCurlyToken;\n    exports.EOFToken = EOFToken;\n    exports.CSSParserToken = CSSParserToken;\n    exports.GroupingToken = GroupingToken;\n}));\n\n\n/***/ }),\n\n/***/ \"./src/server/common/selectorParser.ts\":\n/*!*********************************************!*\\\n  !*** ./src/server/common/selectorParser.ts ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseSelector = void 0;\nconst cssParser_1 = __webpack_require__(/*! ./cssParser */ \"./src/server/common/cssParser.ts\");\nconst customCSSNames = new Set(['not', 'is', 'where', 'has', 'scope', 'light', 'visible', 'text', 'text-matches', 'text-is', 'above', 'below', 'right-of', 'left-of', 'near']);\nfunction parseSelector(selector) {\n    const result = parseSelectorV1(selector);\n    result.parts = result.parts.map(part => {\n        if (Array.isArray(part))\n            return part;\n        if (part.name === 'css' || part.name === 'css:light') {\n            if (part.name === 'css:light')\n                part.body = ':light(' + part.body + ')';\n            const parsedCSS = cssParser_1.parseCSS(part.body, customCSSNames);\n            return parsedCSS.selector;\n        }\n        return part;\n    });\n    return {\n        parts: result.parts,\n        capture: result.capture,\n    };\n}\nexports.parseSelector = parseSelector;\nfunction parseSelectorV1(selector) {\n    let index = 0;\n    let quote;\n    let start = 0;\n    const result = { parts: [] };\n    const append = () => {\n        const part = selector.substring(start, index).trim();\n        const eqIndex = part.indexOf('=');\n        let name;\n        let body;\n        if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n            name = part.substring(0, eqIndex).trim();\n            body = part.substring(eqIndex + 1);\n        }\n        else if (part.length > 1 && part[0] === '\"' && part[part.length - 1] === '\"') {\n            name = 'text';\n            body = part;\n        }\n        else if (part.length > 1 && part[0] === \"'\" && part[part.length - 1] === \"'\") {\n            name = 'text';\n            body = part;\n        }\n        else if (/^\\(*\\/\\//.test(part) || part.startsWith('..')) {\n            // If selector starts with '//' or '//' prefixed with multiple opening\n            // parenthesis, consider xpath. @see https://github.com/microsoft/playwright/issues/817\n            // If selector starts with '..', consider xpath as well.\n            name = 'xpath';\n            body = part;\n        }\n        else {\n            name = 'css';\n            body = part;\n        }\n        let capture = false;\n        if (name[0] === '*') {\n            capture = true;\n            name = name.substring(1);\n        }\n        result.parts.push({ name, body });\n        if (capture) {\n            if (result.capture !== undefined)\n                throw new Error(`Only one of the selectors can capture using * modifier`);\n            result.capture = result.parts.length - 1;\n        }\n    };\n    if (!selector.includes('>>')) {\n        index = selector.length;\n        append();\n        return result;\n    }\n    while (index < selector.length) {\n        const c = selector[index];\n        if (c === '\\\\' && index + 1 < selector.length) {\n            index += 2;\n        }\n        else if (c === quote) {\n            quote = undefined;\n            index++;\n        }\n        else if (!quote && (c === '\"' || c === '\\'' || c === '`')) {\n            quote = c;\n            index++;\n        }\n        else if (!quote && c === '>' && selector[index + 1] === '>') {\n            append();\n            index += 2;\n            start = index;\n        }\n        else {\n            index++;\n        }\n    }\n    append();\n    return result;\n}\n\n\n/***/ }),\n\n/***/ \"./src/server/injected/injectedScript.ts\":\n/*!***********************************************!*\\\n  !*** ./src/server/injected/injectedScript.ts ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InjectedScript = void 0;\nconst textSelectorEngine_1 = __webpack_require__(/*! ./textSelectorEngine */ \"./src/server/injected/textSelectorEngine.ts\");\nconst xpathSelectorEngine_1 = __webpack_require__(/*! ./xpathSelectorEngine */ \"./src/server/injected/xpathSelectorEngine.ts\");\nconst selectorParser_1 = __webpack_require__(/*! ../common/selectorParser */ \"./src/server/common/selectorParser.ts\");\nconst selectorEvaluator_1 = __webpack_require__(/*! ./selectorEvaluator */ \"./src/server/injected/selectorEvaluator.ts\");\nclass InjectedScript {\n    constructor(customEngines) {\n        this._enginesV1 = new Map();\n        this._enginesV1.set('xpath', xpathSelectorEngine_1.XPathEngine);\n        this._enginesV1.set('xpath:light', xpathSelectorEngine_1.XPathEngine);\n        this._enginesV1.set('text', textSelectorEngine_1.createTextSelector(true));\n        this._enginesV1.set('text:light', textSelectorEngine_1.createTextSelector(false));\n        this._enginesV1.set('id', this._createAttributeEngine('id', true));\n        this._enginesV1.set('id:light', this._createAttributeEngine('id', false));\n        this._enginesV1.set('data-testid', this._createAttributeEngine('data-testid', true));\n        this._enginesV1.set('data-testid:light', this._createAttributeEngine('data-testid', false));\n        this._enginesV1.set('data-test-id', this._createAttributeEngine('data-test-id', true));\n        this._enginesV1.set('data-test-id:light', this._createAttributeEngine('data-test-id', false));\n        this._enginesV1.set('data-test', this._createAttributeEngine('data-test', true));\n        this._enginesV1.set('data-test:light', this._createAttributeEngine('data-test', false));\n        for (const { name, engine } of customEngines)\n            this._enginesV1.set(name, engine);\n        // No custom engines in V2 for now.\n        this._evaluator = new selectorEvaluator_1.SelectorEvaluatorImpl(new Map());\n    }\n    parseSelector(selector) {\n        const result = selectorParser_1.parseSelector(selector);\n        for (const part of result.parts) {\n            if (!Array.isArray(part) && !this._enginesV1.has(part.name))\n                throw new Error(`Unknown engine \"${part.name}\" while parsing selector ${selector}`);\n        }\n        return result;\n    }\n    querySelector(selector, root) {\n        if (!root['querySelector'])\n            throw new Error('Node is not queryable.');\n        return this._querySelectorRecursively(root, selector, 0);\n    }\n    _querySelectorRecursively(root, selector, index) {\n        const current = selector.parts[index];\n        if (index === selector.parts.length - 1)\n            return this._queryEngine(current, root);\n        const all = this._queryEngineAll(current, root);\n        for (const next of all) {\n            const result = this._querySelectorRecursively(next, selector, index + 1);\n            if (result)\n                return selector.capture === index ? next : result;\n        }\n    }\n    querySelectorAll(selector, root) {\n        if (!root['querySelectorAll'])\n            throw new Error('Node is not queryable.');\n        const capture = selector.capture === undefined ? selector.parts.length - 1 : selector.capture;\n        // Query all elements up to the capture.\n        const partsToQueryAll = selector.parts.slice(0, capture + 1);\n        // Check they have a descendant matching everything after the capture.\n        const partsToCheckOne = selector.parts.slice(capture + 1);\n        let set = new Set([root]);\n        for (const part of partsToQueryAll) {\n            const newSet = new Set();\n            for (const prev of set) {\n                for (const next of this._queryEngineAll(part, prev)) {\n                    if (newSet.has(next))\n                        continue;\n                    newSet.add(next);\n                }\n            }\n            set = newSet;\n        }\n        const candidates = Array.from(set);\n        if (!partsToCheckOne.length)\n            return candidates;\n        const partial = { parts: partsToCheckOne };\n        return candidates.filter(e => !!this._querySelectorRecursively(e, partial, 0));\n    }\n    _queryEngine(part, root) {\n        if (Array.isArray(part))\n            return this._evaluator.evaluate({ scope: root, pierceShadow: true }, part)[0];\n        return this._enginesV1.get(part.name).query(root, part.body);\n    }\n    _queryEngineAll(part, root) {\n        if (Array.isArray(part))\n            return this._evaluator.evaluate({ scope: root, pierceShadow: true }, part);\n        return this._enginesV1.get(part.name).queryAll(root, part.body);\n    }\n    _createAttributeEngine(attribute, shadow) {\n        const toCSS = (selector) => {\n            const css = `[${attribute}=${JSON.stringify(selector)}]`;\n            return [{ simples: [{ selector: { css, functions: [] }, combinator: '' }] }];\n        };\n        return {\n            query: (root, selector) => {\n                return this._evaluator.evaluate({ scope: root, pierceShadow: shadow }, toCSS(selector))[0];\n            },\n            queryAll: (root, selector) => {\n                return this._evaluator.evaluate({ scope: root, pierceShadow: shadow }, toCSS(selector));\n            }\n        };\n    }\n    extend(source, params) {\n        const constrFunction = global.eval(`\n    (() => {\n      ${source}\n      return pwExport;\n    })()`);\n        return new constrFunction(this, params);\n    }\n    isVisible(element) {\n        return selectorEvaluator_1.isVisible(element);\n    }\n    pollRaf(predicate) {\n        return this._runAbortableTask(progress => {\n            let fulfill;\n            let reject;\n            const result = new Promise((f, r) => { fulfill = f; reject = r; });\n            const onRaf = () => {\n                if (progress.aborted)\n                    return;\n                try {\n                    const continuePolling = Symbol('continuePolling');\n                    const success = predicate(progress, continuePolling);\n                    if (success !== continuePolling)\n                        fulfill(success);\n                    else\n                        requestAnimationFrame(onRaf);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            };\n            onRaf();\n            return result;\n        });\n    }\n    pollInterval(pollInterval, predicate) {\n        return this._runAbortableTask(progress => {\n            let fulfill;\n            let reject;\n            const result = new Promise((f, r) => { fulfill = f; reject = r; });\n            const onTimeout = () => {\n                if (progress.aborted)\n                    return;\n                try {\n                    const continuePolling = Symbol('continuePolling');\n                    const success = predicate(progress, continuePolling);\n                    if (success !== continuePolling)\n                        fulfill(success);\n                    else\n                        setTimeout(onTimeout, pollInterval);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            };\n            onTimeout();\n            return result;\n        });\n    }\n    _runAbortableTask(task) {\n        let unsentLogs = [];\n        let takeNextLogsCallback;\n        let taskFinished = false;\n        const logReady = () => {\n            if (!takeNextLogsCallback)\n                return;\n            takeNextLogsCallback(unsentLogs);\n            unsentLogs = [];\n            takeNextLogsCallback = undefined;\n        };\n        const takeNextLogs = () => new Promise(fulfill => {\n            takeNextLogsCallback = fulfill;\n            if (unsentLogs.length || taskFinished)\n                logReady();\n        });\n        let lastLog = '';\n        const progress = {\n            aborted: false,\n            log: (message) => {\n                lastLog = message;\n                unsentLogs.push(message);\n                logReady();\n            },\n            logRepeating: (message) => {\n                if (message !== lastLog)\n                    progress.log(message);\n            },\n        };\n        const run = () => {\n            const result = task(progress);\n            // After the task has finished, there should be no more logs.\n            // Release any pending `takeNextLogs` call, and do not block any future ones.\n            // This prevents non-finished protocol evaluation calls and memory leaks.\n            result.finally(() => {\n                taskFinished = true;\n                logReady();\n            });\n            return result;\n        };\n        return {\n            takeNextLogs,\n            run,\n            cancel: () => { progress.aborted = true; },\n            takeLastLogs: () => unsentLogs,\n        };\n    }\n    getElementBorderWidth(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)\n            return { left: 0, top: 0 };\n        const style = node.ownerDocument.defaultView.getComputedStyle(node);\n        return { left: parseInt(style.borderLeftWidth || '', 10), top: parseInt(style.borderTopWidth || '', 10) };\n    }\n    waitForOptionsAndSelect(node, optionsToSelect) {\n        return this.pollRaf((progress, continuePolling) => {\n            const element = this.findLabelTarget(node);\n            if (!element || !element.isConnected)\n                return 'error:notconnected';\n            if (element.nodeName.toLowerCase() !== 'select')\n                return 'error:notselect';\n            const select = element;\n            const options = Array.from(select.options);\n            const selectedOptions = [];\n            let remainingOptionsToSelect = optionsToSelect.slice();\n            for (let index = 0; index < options.length; index++) {\n                const option = options[index];\n                const filter = (optionToSelect) => {\n                    if (optionToSelect instanceof Node)\n                        return option === optionToSelect;\n                    let matches = true;\n                    if (optionToSelect.value !== undefined)\n                        matches = matches && optionToSelect.value === option.value;\n                    if (optionToSelect.label !== undefined)\n                        matches = matches && optionToSelect.label === option.label;\n                    if (optionToSelect.index !== undefined)\n                        matches = matches && optionToSelect.index === index;\n                    return matches;\n                };\n                if (!remainingOptionsToSelect.some(filter))\n                    continue;\n                selectedOptions.push(option);\n                if (select.multiple) {\n                    remainingOptionsToSelect = remainingOptionsToSelect.filter(o => !filter(o));\n                }\n                else {\n                    remainingOptionsToSelect = [];\n                    break;\n                }\n            }\n            if (remainingOptionsToSelect.length) {\n                progress.logRepeating('    did not find some options - waiting... ');\n                return continuePolling;\n            }\n            select.value = undefined;\n            selectedOptions.forEach(option => option.selected = true);\n            progress.log('    selected specified option(s)');\n            select.dispatchEvent(new Event('input', { 'bubbles': true }));\n            select.dispatchEvent(new Event('change', { 'bubbles': true }));\n            return selectedOptions.map(option => option.value);\n        });\n    }\n    waitForEnabledAndFill(node, value) {\n        return this.pollRaf((progress, continuePolling) => {\n            if (node.nodeType !== Node.ELEMENT_NODE)\n                return 'error:notelement';\n            const element = this.findLabelTarget(node);\n            if (element && !element.isConnected)\n                return 'error:notconnected';\n            if (!element || !this.isVisible(element)) {\n                progress.logRepeating('    element is not visible - waiting...');\n                return continuePolling;\n            }\n            if (element.nodeName.toLowerCase() === 'input') {\n                const input = element;\n                const type = input.type.toLowerCase();\n                const kDateTypes = new Set(['date', 'time', 'datetime', 'datetime-local', 'month', 'week']);\n                const kTextInputTypes = new Set(['', 'email', 'number', 'password', 'search', 'tel', 'text', 'url']);\n                if (!kTextInputTypes.has(type) && !kDateTypes.has(type)) {\n                    progress.log(`    input of type \"${type}\" cannot be filled`);\n                    return 'error:notfillableinputtype';\n                }\n                if (type === 'number') {\n                    value = value.trim();\n                    if (isNaN(Number(value)))\n                        return 'error:notfillablenumberinput';\n                }\n                if (input.disabled) {\n                    progress.logRepeating('    element is disabled - waiting...');\n                    return continuePolling;\n                }\n                if (input.readOnly) {\n                    progress.logRepeating('    element is readonly - waiting...');\n                    return continuePolling;\n                }\n                if (kDateTypes.has(type)) {\n                    value = value.trim();\n                    input.focus();\n                    input.value = value;\n                    if (input.value !== value)\n                        return 'error:notvaliddate';\n                    element.dispatchEvent(new Event('input', { 'bubbles': true }));\n                    element.dispatchEvent(new Event('change', { 'bubbles': true }));\n                    return 'done'; // We have already changed the value, no need to input it.\n                }\n            }\n            else if (element.nodeName.toLowerCase() === 'textarea') {\n                const textarea = element;\n                if (textarea.disabled) {\n                    progress.logRepeating('    element is disabled - waiting...');\n                    return continuePolling;\n                }\n                if (textarea.readOnly) {\n                    progress.logRepeating('    element is readonly - waiting...');\n                    return continuePolling;\n                }\n            }\n            else if (!element.isContentEditable) {\n                return 'error:notfillableelement';\n            }\n            const result = this._selectText(element);\n            if (result === 'error:notvisible') {\n                progress.logRepeating('    element is not visible - waiting...');\n                return continuePolling;\n            }\n            return 'needsinput'; // Still need to input the value.\n        });\n    }\n    waitForVisibleAndSelectText(node) {\n        return this.pollRaf((progress, continuePolling) => {\n            if (node.nodeType !== Node.ELEMENT_NODE)\n                return 'error:notelement';\n            if (!node.isConnected)\n                return 'error:notconnected';\n            const element = node;\n            if (!this.isVisible(element)) {\n                progress.logRepeating('    element is not visible - waiting...');\n                return continuePolling;\n            }\n            const result = this._selectText(element);\n            if (result === 'error:notvisible') {\n                progress.logRepeating('    element is not visible - waiting...');\n                return continuePolling;\n            }\n            return result;\n        });\n    }\n    _selectText(element) {\n        if (element.nodeName.toLowerCase() === 'input') {\n            const input = element;\n            input.select();\n            input.focus();\n            return 'done';\n        }\n        if (element.nodeName.toLowerCase() === 'textarea') {\n            const textarea = element;\n            textarea.selectionStart = 0;\n            textarea.selectionEnd = textarea.value.length;\n            textarea.focus();\n            return 'done';\n        }\n        const range = element.ownerDocument.createRange();\n        range.selectNodeContents(element);\n        const selection = element.ownerDocument.defaultView.getSelection();\n        if (!selection)\n            return 'error:notvisible';\n        selection.removeAllRanges();\n        selection.addRange(range);\n        element.focus();\n        return 'done';\n    }\n    waitForNodeVisible(node) {\n        return this.pollRaf((progress, continuePolling) => {\n            const element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n            if (!node.isConnected || !element)\n                return 'error:notconnected';\n            if (!this.isVisible(element)) {\n                progress.logRepeating('    element is not visible - waiting...');\n                return continuePolling;\n            }\n            return 'done';\n        });\n    }\n    waitForNodeHidden(node) {\n        return this.pollRaf((progress, continuePolling) => {\n            const element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n            if (!node.isConnected || !element)\n                return 'done';\n            if (this.isVisible(element)) {\n                progress.logRepeating('    element is visible - waiting...');\n                return continuePolling;\n            }\n            return 'done';\n        });\n    }\n    waitForNodeEnabled(node, waitForEditable) {\n        return this.pollRaf((progress, continuePolling) => {\n            const element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n            if (!node.isConnected || !element)\n                return 'error:notconnected';\n            if (this.isElementDisabled(element)) {\n                progress.logRepeating('    element is not enabled - waiting...');\n                return continuePolling;\n            }\n            if (waitForEditable && this.isElementReadOnly(element)) {\n                progress.logRepeating('    element is readonly - waiting...');\n                return continuePolling;\n            }\n            return 'done';\n        });\n    }\n    waitForNodeDisabled(node) {\n        return this.pollRaf((progress, continuePolling) => {\n            const element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n            if (!node.isConnected || !element)\n                return 'error:notconnected';\n            if (!this.isElementDisabled(element)) {\n                progress.logRepeating('    element is enabled - waiting...');\n                return continuePolling;\n            }\n            return 'done';\n        });\n    }\n    focusNode(node, resetSelectionIfNotFocused) {\n        if (!node.isConnected)\n            return 'error:notconnected';\n        if (node.nodeType !== Node.ELEMENT_NODE)\n            return 'error:notelement';\n        const wasFocused = node.getRootNode().activeElement === node && node.ownerDocument && node.ownerDocument.hasFocus();\n        node.focus();\n        if (resetSelectionIfNotFocused && !wasFocused && node.nodeName.toLowerCase() === 'input') {\n            try {\n                const input = node;\n                input.setSelectionRange(0, 0);\n            }\n            catch (e) {\n                // Some inputs do not allow selection.\n            }\n        }\n        return 'done';\n    }\n    findLabelTarget(element) {\n        return element.nodeName === 'LABEL' ? element.control || undefined : element;\n    }\n    isCheckboxChecked(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE)\n            throw new Error('Not a checkbox or radio button');\n        const element = node;\n        if (element.getAttribute('role') === 'checkbox')\n            return element.getAttribute('aria-checked') === 'true';\n        const input = this.findLabelTarget(element);\n        if (!input || input.nodeName !== 'INPUT')\n            throw new Error('Not a checkbox or radio button');\n        if (!['radio', 'checkbox'].includes(input.type.toLowerCase()))\n            throw new Error('Not a checkbox or radio button');\n        return input.checked;\n    }\n    setInputFiles(node, payloads) {\n        if (node.nodeType !== Node.ELEMENT_NODE)\n            return 'Node is not of type HTMLElement';\n        const element = node;\n        if (element.nodeName !== 'INPUT')\n            return 'Not an <input> element';\n        const input = element;\n        const type = (input.getAttribute('type') || '').toLowerCase();\n        if (type !== 'file')\n            return 'Not an input[type=file] element';\n        const files = payloads.map(file => {\n            const bytes = Uint8Array.from(atob(file.buffer), c => c.charCodeAt(0));\n            return new File([bytes], file.name, { type: file.mimeType });\n        });\n        const dt = new DataTransfer();\n        for (const file of files)\n            dt.items.add(file);\n        input.files = dt.files;\n        input.dispatchEvent(new Event('input', { 'bubbles': true }));\n        input.dispatchEvent(new Event('change', { 'bubbles': true }));\n    }\n    waitForDisplayedAtStablePosition(node, rafOptions, waitForEnabled) {\n        let lastRect;\n        let counter = 0;\n        let samePositionCounter = 0;\n        let lastTime = 0;\n        const predicate = (progress, continuePolling) => {\n            // First raf happens in the same animation frame as evaluation, so it does not produce\n            // any client rect difference compared to synchronous call. We skip the synchronous call\n            // and only force layout during actual rafs as a small optimisation.\n            if (++counter === 1)\n                return continuePolling;\n            if (!node.isConnected)\n                return 'error:notconnected';\n            const element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n            if (!element)\n                return 'error:notconnected';\n            // Drop frames that are shorter than 16ms - WebKit Win bug.\n            const time = performance.now();\n            if (rafOptions.rafCount > 1 && time - lastTime < 15)\n                return continuePolling;\n            lastTime = time;\n            // Note: this logic should be similar to isVisible() to avoid surprises.\n            const clientRect = element.getBoundingClientRect();\n            const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };\n            const samePosition = lastRect && rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height;\n            const isDisplayed = rect.width > 0 && rect.height > 0;\n            if (samePosition)\n                ++samePositionCounter;\n            else\n                samePositionCounter = 0;\n            const isStable = samePositionCounter >= rafOptions.rafCount;\n            const isStableForLogs = isStable || !lastRect;\n            lastRect = rect;\n            const style = element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView.getComputedStyle(element) : undefined;\n            const isVisible = !!style && style.visibility !== 'hidden';\n            const isDisabled = waitForEnabled && this.isElementDisabled(element);\n            if (isDisplayed && isStable && isVisible && !isDisabled)\n                return 'done';\n            if (!isDisplayed || !isVisible)\n                progress.logRepeating(`    element is not visible - waiting...`);\n            else if (!isStableForLogs)\n                progress.logRepeating(`    element is moving - waiting...`);\n            else if (isDisabled)\n                progress.logRepeating(`    element is disabled - waiting...`);\n            return continuePolling;\n        };\n        if (rafOptions.useTimeout)\n            return this.pollInterval(16, predicate);\n        else\n            return this.pollRaf(predicate);\n    }\n    checkHitTargetAt(node, point) {\n        let element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n        if (!element || !element.isConnected)\n            return 'error:notconnected';\n        element = element.closest('button, [role=button]') || element;\n        let hitElement = this.deepElementFromPoint(document, point.x, point.y);\n        const hitParents = [];\n        while (hitElement && hitElement !== element) {\n            hitParents.push(hitElement);\n            hitElement = selectorEvaluator_1.parentElementOrShadowHost(hitElement);\n        }\n        if (hitElement === element)\n            return 'done';\n        const hitTargetDescription = this.previewNode(hitParents[0]);\n        // Root is the topmost element in the hitTarget's chain that is not in the\n        // element's chain. For example, it might be a dialog element that overlays\n        // the target.\n        let rootHitTargetDescription;\n        while (element) {\n            const index = hitParents.indexOf(element);\n            if (index !== -1) {\n                if (index > 1)\n                    rootHitTargetDescription = this.previewNode(hitParents[index - 1]);\n                break;\n            }\n            element = selectorEvaluator_1.parentElementOrShadowHost(element);\n        }\n        if (rootHitTargetDescription)\n            return { hitTargetDescription: `${hitTargetDescription} from ${rootHitTargetDescription} subtree` };\n        return { hitTargetDescription };\n    }\n    dispatchEvent(node, type, eventInit) {\n        let event;\n        eventInit = { bubbles: true, cancelable: true, composed: true, ...eventInit };\n        switch (eventType.get(type)) {\n            case 'mouse':\n                event = new MouseEvent(type, eventInit);\n                break;\n            case 'keyboard':\n                event = new KeyboardEvent(type, eventInit);\n                break;\n            case 'touch':\n                event = new TouchEvent(type, eventInit);\n                break;\n            case 'pointer':\n                event = new PointerEvent(type, eventInit);\n                break;\n            case 'focus':\n                event = new FocusEvent(type, eventInit);\n                break;\n            case 'drag':\n                event = new DragEvent(type, eventInit);\n                break;\n            default:\n                event = new Event(type, eventInit);\n                break;\n        }\n        node.dispatchEvent(event);\n    }\n    isElementDisabled(element) {\n        const elementOrButton = element.closest('button, [role=button]') || element;\n        return ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'].includes(elementOrButton.nodeName) && elementOrButton.hasAttribute('disabled');\n    }\n    isElementReadOnly(element) {\n        const target = this.findLabelTarget(element);\n        return !!target && ['INPUT', 'TEXTAREA'].includes(target.nodeName) && target.hasAttribute('readonly');\n    }\n    deepElementFromPoint(document, x, y) {\n        let container = document;\n        let element;\n        while (container) {\n            const innerElement = container.elementFromPoint(x, y);\n            if (!innerElement || element === innerElement)\n                break;\n            element = innerElement;\n            container = element.shadowRoot;\n        }\n        return element;\n    }\n    previewNode(node) {\n        if (node.nodeType === Node.TEXT_NODE)\n            return oneLine(`#text=${node.nodeValue || ''}`);\n        if (node.nodeType !== Node.ELEMENT_NODE)\n            return oneLine(`<${node.nodeName.toLowerCase()} />`);\n        const element = node;\n        const attrs = [];\n        for (let i = 0; i < element.attributes.length; i++) {\n            const { name, value } = element.attributes[i];\n            if (name === 'style')\n                continue;\n            if (!value && booleanAttributes.has(name))\n                attrs.push(` ${name}`);\n            else\n                attrs.push(` ${name}=\"${value}\"`);\n        }\n        attrs.sort((a, b) => a.length - b.length);\n        let attrText = attrs.join('');\n        if (attrText.length > 50)\n            attrText = attrText.substring(0, 49) + '\\u2026';\n        if (autoClosingTags.has(element.nodeName))\n            return oneLine(`<${element.nodeName.toLowerCase()}${attrText}/>`);\n        const children = element.childNodes;\n        let onlyText = false;\n        if (children.length <= 5) {\n            onlyText = true;\n            for (let i = 0; i < children.length; i++)\n                onlyText = onlyText && children[i].nodeType === Node.TEXT_NODE;\n        }\n        let text = onlyText ? (element.textContent || '') : (children.length ? '\\u2026' : '');\n        if (text.length > 50)\n            text = text.substring(0, 49) + '\\u2026';\n        return oneLine(`<${element.nodeName.toLowerCase()}${attrText}>${text}</${element.nodeName.toLowerCase()}>`);\n    }\n}\nexports.InjectedScript = InjectedScript;\nconst autoClosingTags = new Set(['AREA', 'BASE', 'BR', 'COL', 'COMMAND', 'EMBED', 'HR', 'IMG', 'INPUT', 'KEYGEN', 'LINK', 'MENUITEM', 'META', 'PARAM', 'SOURCE', 'TRACK', 'WBR']);\nconst booleanAttributes = new Set(['checked', 'selected', 'disabled', 'readonly', 'multiple']);\nfunction oneLine(s) {\n    return s.replace(/\\n/g, '↵').replace(/\\t/g, '⇆');\n}\nconst eventType = new Map([\n    ['auxclick', 'mouse'],\n    ['click', 'mouse'],\n    ['dblclick', 'mouse'],\n    ['mousedown', 'mouse'],\n    ['mouseeenter', 'mouse'],\n    ['mouseleave', 'mouse'],\n    ['mousemove', 'mouse'],\n    ['mouseout', 'mouse'],\n    ['mouseover', 'mouse'],\n    ['mouseup', 'mouse'],\n    ['mouseleave', 'mouse'],\n    ['mousewheel', 'mouse'],\n    ['keydown', 'keyboard'],\n    ['keyup', 'keyboard'],\n    ['keypress', 'keyboard'],\n    ['textInput', 'keyboard'],\n    ['touchstart', 'touch'],\n    ['touchmove', 'touch'],\n    ['touchend', 'touch'],\n    ['touchcancel', 'touch'],\n    ['pointerover', 'pointer'],\n    ['pointerout', 'pointer'],\n    ['pointerenter', 'pointer'],\n    ['pointerleave', 'pointer'],\n    ['pointerdown', 'pointer'],\n    ['pointerup', 'pointer'],\n    ['pointermove', 'pointer'],\n    ['pointercancel', 'pointer'],\n    ['gotpointercapture', 'pointer'],\n    ['lostpointercapture', 'pointer'],\n    ['focus', 'focus'],\n    ['blur', 'focus'],\n    ['drag', 'drag'],\n    ['dragstart', 'drag'],\n    ['dragend', 'drag'],\n    ['dragover', 'drag'],\n    ['dragenter', 'drag'],\n    ['dragleave', 'drag'],\n    ['dragexit', 'drag'],\n    ['drop', 'drag'],\n]);\nexports.default = InjectedScript;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"./src/server/injected/selectorEvaluator.ts\":\n/*!**************************************************!*\\\n  !*** ./src/server/injected/selectorEvaluator.ts ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isVisible = exports.parentElementOrShadowHost = exports.SelectorEvaluatorImpl = void 0;\nclass SelectorEvaluatorImpl {\n    constructor(extraEngines) {\n        this._engines = new Map();\n        this._cacheQueryCSS = new Map();\n        this._cacheMatches = new Map();\n        this._cacheQuery = new Map();\n        this._cacheMatchesSimple = new Map();\n        this._cacheMatchesParents = new Map();\n        this._cacheCallMatches = new Map();\n        this._cacheCallQuery = new Map();\n        this._cacheQuerySimple = new Map();\n        // Note: keep predefined names in sync with Selectors class.\n        for (const [name, engine] of extraEngines)\n            this._engines.set(name, engine);\n        this._engines.set('not', notEngine);\n        this._engines.set('is', isEngine);\n        this._engines.set('where', isEngine);\n        this._engines.set('has', hasEngine);\n        this._engines.set('scope', scopeEngine);\n        this._engines.set('light', lightEngine);\n        this._engines.set('visible', visibleEngine);\n        this._engines.set('text', textEngine);\n        this._engines.set('text-is', textIsEngine);\n        this._engines.set('text-matches', textMatchesEngine);\n        this._engines.set('right-of', createPositionEngine('right-of', boxRightOf));\n        this._engines.set('left-of', createPositionEngine('left-of', boxLeftOf));\n        this._engines.set('above', createPositionEngine('above', boxAbove));\n        this._engines.set('below', createPositionEngine('below', boxBelow));\n        this._engines.set('near', createPositionEngine('near', boxNear));\n    }\n    // This is the only function we should use for querying, because it does\n    // the right thing with caching.\n    evaluate(context, s) {\n        const result = this.query(context, s);\n        this._cacheQueryCSS.clear();\n        this._cacheMatches.clear();\n        this._cacheQuery.clear();\n        this._cacheMatchesSimple.clear();\n        this._cacheMatchesParents.clear();\n        this._cacheCallMatches.clear();\n        this._cacheCallQuery.clear();\n        this._cacheQuerySimple.clear();\n        return result;\n    }\n    _cached(cache, main, rest, cb) {\n        if (!cache.has(main))\n            cache.set(main, []);\n        const entries = cache.get(main);\n        const entry = entries.find(e => rest.every((value, index) => e.rest[index] === value));\n        if (entry)\n            return entry.result;\n        const result = cb();\n        entries.push({ rest, result });\n        return result;\n    }\n    _checkSelector(s) {\n        const wellFormed = typeof s === 'object' && s &&\n            (Array.isArray(s) || ('simples' in s) && (s.simples.length));\n        if (!wellFormed)\n            throw new Error(`Malformed selector \"${s}\"`);\n        return s;\n    }\n    matches(element, s, context) {\n        const selector = this._checkSelector(s);\n        return this._cached(this._cacheMatches, element, [selector, context], () => {\n            if (Array.isArray(selector))\n                return this._matchesEngine(isEngine, element, selector, context);\n            if (!this._matchesSimple(element, selector.simples[selector.simples.length - 1].selector, context))\n                return false;\n            return this._matchesParents(element, selector, selector.simples.length - 2, context);\n        });\n    }\n    query(context, s) {\n        const selector = this._checkSelector(s);\n        return this._cached(this._cacheQuery, selector, [context], () => {\n            if (Array.isArray(selector))\n                return this._queryEngine(isEngine, context, selector);\n            // query() recursively calls itself, so we set up a new map for this particular query() call.\n            const previousScoreMap = this._scoreMap;\n            this._scoreMap = new Map();\n            let elements = this._querySimple(context, selector.simples[selector.simples.length - 1].selector);\n            elements = elements.filter(element => this._matchesParents(element, selector, selector.simples.length - 2, context));\n            if (this._scoreMap.size) {\n                elements.sort((a, b) => {\n                    const aScore = this._scoreMap.get(a);\n                    const bScore = this._scoreMap.get(b);\n                    if (aScore === bScore)\n                        return 0;\n                    if (aScore === undefined)\n                        return 1;\n                    if (bScore === undefined)\n                        return -1;\n                    return aScore - bScore;\n                });\n            }\n            this._scoreMap = previousScoreMap;\n            return elements;\n        });\n    }\n    _markScore(element, score) {\n        // HACK ALERT: temporary marks an element with a score, to be used\n        // for sorting at the end of the query().\n        if (this._scoreMap)\n            this._scoreMap.set(element, score);\n    }\n    _matchesSimple(element, simple, context) {\n        return this._cached(this._cacheMatchesSimple, element, [simple, context], () => {\n            const isPossiblyScopeClause = simple.functions.some(f => f.name === 'scope' || f.name === 'is');\n            if (!isPossiblyScopeClause && element === context.scope)\n                return false;\n            if (simple.css && !this._matchesCSS(element, simple.css))\n                return false;\n            for (const func of simple.functions) {\n                if (!this._matchesEngine(this._getEngine(func.name), element, func.args, context))\n                    return false;\n            }\n            return true;\n        });\n    }\n    _querySimple(context, simple) {\n        if (!simple.functions.length)\n            return this._queryCSS(context, simple.css || '*');\n        return this._cached(this._cacheQuerySimple, simple, [context], () => {\n            let css = simple.css;\n            const funcs = simple.functions;\n            if (css === '*' && funcs.length)\n                css = undefined;\n            let elements;\n            let firstIndex = -1;\n            if (css !== undefined) {\n                elements = this._queryCSS(context, css);\n            }\n            else {\n                firstIndex = funcs.findIndex(func => this._getEngine(func.name).query !== undefined);\n                if (firstIndex === -1)\n                    firstIndex = 0;\n                elements = this._queryEngine(this._getEngine(funcs[firstIndex].name), context, funcs[firstIndex].args);\n            }\n            for (let i = 0; i < funcs.length; i++) {\n                if (i === firstIndex)\n                    continue;\n                const engine = this._getEngine(funcs[i].name);\n                if (engine.matches !== undefined)\n                    elements = elements.filter(e => this._matchesEngine(engine, e, funcs[i].args, context));\n            }\n            for (let i = 0; i < funcs.length; i++) {\n                if (i === firstIndex)\n                    continue;\n                const engine = this._getEngine(funcs[i].name);\n                if (engine.matches === undefined)\n                    elements = elements.filter(e => this._matchesEngine(engine, e, funcs[i].args, context));\n            }\n            return elements;\n        });\n    }\n    _matchesParents(element, complex, index, context) {\n        if (index < 0)\n            return true;\n        return this._cached(this._cacheMatchesParents, element, [complex, index, context], () => {\n            const { selector: simple, combinator } = complex.simples[index];\n            if (combinator === '>') {\n                const parent = parentElementOrShadowHostInContext(element, context);\n                if (!parent || !this._matchesSimple(parent, simple, context))\n                    return false;\n                return this._matchesParents(parent, complex, index - 1, context);\n            }\n            if (combinator === '+') {\n                const previousSibling = previousSiblingInContext(element, context);\n                if (!previousSibling || !this._matchesSimple(previousSibling, simple, context))\n                    return false;\n                return this._matchesParents(previousSibling, complex, index - 1, context);\n            }\n            if (combinator === '') {\n                let parent = parentElementOrShadowHostInContext(element, context);\n                while (parent) {\n                    if (this._matchesSimple(parent, simple, context)) {\n                        if (this._matchesParents(parent, complex, index - 1, context))\n                            return true;\n                        if (complex.simples[index - 1].combinator === '')\n                            break;\n                    }\n                    parent = parentElementOrShadowHostInContext(parent, context);\n                }\n                return false;\n            }\n            if (combinator === '~') {\n                let previousSibling = previousSiblingInContext(element, context);\n                while (previousSibling) {\n                    if (this._matchesSimple(previousSibling, simple, context)) {\n                        if (this._matchesParents(previousSibling, complex, index - 1, context))\n                            return true;\n                        if (complex.simples[index - 1].combinator === '~')\n                            break;\n                    }\n                    previousSibling = previousSiblingInContext(previousSibling, context);\n                }\n                return false;\n            }\n            if (combinator === '>=') {\n                let parent = element;\n                while (parent) {\n                    if (this._matchesSimple(parent, simple, context)) {\n                        if (this._matchesParents(parent, complex, index - 1, context))\n                            return true;\n                        if (complex.simples[index - 1].combinator === '')\n                            break;\n                    }\n                    parent = parentElementOrShadowHostInContext(parent, context);\n                }\n                return false;\n            }\n            throw new Error(`Unsupported combinator \"${combinator}\"`);\n        });\n    }\n    _matchesEngine(engine, element, args, context) {\n        if (engine.matches)\n            return this._callMatches(engine, element, args, context);\n        if (engine.query)\n            return this._callQuery(engine, args, context).includes(element);\n        throw new Error(`Selector engine should implement \"matches\" or \"query\"`);\n    }\n    _queryEngine(engine, context, args) {\n        if (engine.query)\n            return this._callQuery(engine, args, context);\n        if (engine.matches)\n            return this._queryCSS(context, '*').filter(element => this._callMatches(engine, element, args, context));\n        throw new Error(`Selector engine should implement \"matches\" or \"query\"`);\n    }\n    _callMatches(engine, element, args, context) {\n        return this._cached(this._cacheCallMatches, element, [engine, args, context.scope, context.pierceShadow], () => {\n            return engine.matches(element, args, context, this);\n        });\n    }\n    _callQuery(engine, args, context) {\n        return this._cached(this._cacheCallQuery, args, [engine, context.scope, context.pierceShadow], () => {\n            return engine.query(context, args, this);\n        });\n    }\n    _matchesCSS(element, css) {\n        return element.matches(css);\n    }\n    _queryCSS(context, css) {\n        return this._cached(this._cacheQueryCSS, css, [context], () => {\n            let result = [];\n            function query(root) {\n                result = result.concat([...root.querySelectorAll(css)]);\n                if (!context.pierceShadow)\n                    return;\n                if (root.shadowRoot)\n                    query(root.shadowRoot);\n                for (const element of root.querySelectorAll('*')) {\n                    if (element.shadowRoot)\n                        query(element.shadowRoot);\n                }\n            }\n            query(context.scope);\n            return result;\n        });\n    }\n    _getEngine(name) {\n        const engine = this._engines.get(name);\n        if (!engine)\n            throw new Error(`Unknown selector engine \"${name}\"`);\n        return engine;\n    }\n}\nexports.SelectorEvaluatorImpl = SelectorEvaluatorImpl;\nconst isEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length === 0)\n            throw new Error(`\"is\" engine expects non-empty selector list`);\n        return args.some(selector => evaluator.matches(element, selector, context));\n    },\n    query(context, args, evaluator) {\n        if (args.length === 0)\n            throw new Error(`\"is\" engine expects non-empty selector list`);\n        let elements = [];\n        for (const arg of args)\n            elements = elements.concat(evaluator.query(context, arg));\n        return args.length === 1 ? elements : sortInDOMOrder(elements);\n    },\n};\nconst hasEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length === 0)\n            throw new Error(`\"has\" engine expects non-empty selector list`);\n        return evaluator.query({ ...context, scope: element }, args).length > 0;\n    },\n};\nconst scopeEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length !== 0)\n            throw new Error(`\"scope\" engine expects no arguments`);\n        if (context.scope.nodeType === 9 /* Node.DOCUMENT_NODE */)\n            return element === context.scope.documentElement;\n        return element === context.scope;\n    },\n    query(context, args, evaluator) {\n        if (args.length !== 0)\n            throw new Error(`\"scope\" engine expects no arguments`);\n        if (context.scope.nodeType === 9 /* Node.DOCUMENT_NODE */) {\n            const root = context.scope.documentElement;\n            return root ? [root] : [];\n        }\n        if (context.scope.nodeType === 1 /* Node.ELEMENT_NODE */)\n            return [context.scope];\n        return [];\n    },\n};\nconst notEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length === 0)\n            throw new Error(`\"not\" engine expects non-empty selector list`);\n        return !evaluator.matches(element, args, context);\n    },\n};\nconst lightEngine = {\n    query(context, args, evaluator) {\n        return evaluator.query({ ...context, pierceShadow: false }, args);\n    },\n    matches(element, args, context, evaluator) {\n        return evaluator.matches(element, args, { ...context, pierceShadow: false });\n    }\n};\nconst visibleEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length)\n            throw new Error(`\"visible\" engine expects no arguments`);\n        return isVisible(element);\n    }\n};\nconst textEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length === 0 || typeof args[0] !== 'string')\n            throw new Error(`\"text\" engine expects a single string`);\n        return elementMatchesText(element, context, textMatcher(args[0], true));\n    },\n};\nconst textIsEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length === 0 || typeof args[0] !== 'string')\n            throw new Error(`\"text-is\" engine expects a single string`);\n        return elementMatchesText(element, context, textMatcher(args[0], false));\n    },\n};\nconst textMatchesEngine = {\n    matches(element, args, context, evaluator) {\n        if (args.length === 0 || typeof args[0] !== 'string' || args.length > 2 || (args.length === 2 && typeof args[1] !== 'string'))\n            throw new Error(`\"text-matches\" engine expects a regexp body and optional regexp flags`);\n        const re = new RegExp(args[0], args.length === 2 ? args[1] : undefined);\n        return elementMatchesText(element, context, s => re.test(s));\n    },\n};\nfunction textMatcher(text, substring) {\n    text = text.trim().replace(/\\s+/g, ' ');\n    text = text.toLowerCase();\n    return (s) => {\n        s = s.trim().replace(/\\s+/g, ' ');\n        s = s.toLowerCase();\n        return substring ? s.includes(text) : s === text;\n    };\n}\nfunction elementMatchesText(element, context, matcher) {\n    if (element.nodeName === 'SCRIPT' || element.nodeName === 'STYLE' || document.head && document.head.contains(element))\n        return false;\n    if ((element instanceof HTMLInputElement) && (element.type === 'submit' || element.type === 'button') && matcher(element.value))\n        return true;\n    let lastText = '';\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n        if (child.nodeType === 3 /* Node.TEXT_NODE */) {\n            lastText += child.nodeValue;\n        }\n        else {\n            if (lastText && matcher(lastText))\n                return true;\n            lastText = '';\n        }\n    }\n    return !!lastText && matcher(lastText);\n}\nfunction boxRightOf(box1, box2) {\n    if (box1.left < box2.right)\n        return;\n    return (box1.left - box2.right) + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxLeftOf(box1, box2) {\n    if (box1.right > box2.left)\n        return;\n    return (box2.left - box1.right) + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxAbove(box1, box2) {\n    if (box1.bottom > box2.top)\n        return;\n    return (box2.top - box1.bottom) + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxBelow(box1, box2) {\n    if (box1.top < box2.bottom)\n        return;\n    return (box1.top - box2.bottom) + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxNear(box1, box2) {\n    const kThreshold = 50;\n    let score = 0;\n    if (box1.left - box2.right >= 0)\n        score += box1.left - box2.right;\n    if (box2.left - box1.right >= 0)\n        score += box2.left - box1.right;\n    if (box2.top - box1.bottom >= 0)\n        score += box2.top - box1.bottom;\n    if (box1.top - box2.bottom >= 0)\n        score += box1.top - box2.bottom;\n    return score > kThreshold ? undefined : score;\n}\nfunction createPositionEngine(name, scorer) {\n    return {\n        matches(element, args, context, evaluator) {\n            if (!args.length)\n                throw new Error(`\"${name}\" engine expects a selector list`);\n            const box = element.getBoundingClientRect();\n            let bestScore;\n            for (const e of evaluator.query(context, args)) {\n                if (e === element)\n                    continue;\n                const score = scorer(box, e.getBoundingClientRect());\n                if (score === undefined)\n                    continue;\n                if (bestScore === undefined || score < bestScore)\n                    bestScore = score;\n            }\n            if (bestScore === undefined)\n                return false;\n            evaluator._markScore(element, bestScore);\n            return true;\n        }\n    };\n}\nfunction parentElementOrShadowHost(element) {\n    if (element.parentElement)\n        return element.parentElement;\n    if (!element.parentNode)\n        return;\n    if (element.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE && element.parentNode.host)\n        return element.parentNode.host;\n}\nexports.parentElementOrShadowHost = parentElementOrShadowHost;\nfunction parentElementOrShadowHostInContext(element, context) {\n    if (element === context.scope)\n        return;\n    if (!context.pierceShadow)\n        return element.parentElement || undefined;\n    return parentElementOrShadowHost(element);\n}\nfunction previousSiblingInContext(element, context) {\n    if (element === context.scope)\n        return;\n    return element.previousElementSibling || undefined;\n}\nfunction isVisible(element) {\n    // Note: this logic should be similar to waitForDisplayedAtStablePosition() to avoid surprises.\n    if (!element.ownerDocument || !element.ownerDocument.defaultView)\n        return true;\n    const style = element.ownerDocument.defaultView.getComputedStyle(element);\n    if (!style || style.visibility === 'hidden')\n        return false;\n    const rect = element.getBoundingClientRect();\n    return rect.width > 0 && rect.height > 0;\n}\nexports.isVisible = isVisible;\nfunction sortInDOMOrder(elements) {\n    const elementToEntry = new Map();\n    const roots = [];\n    const result = [];\n    function append(element) {\n        let entry = elementToEntry.get(element);\n        if (entry)\n            return entry;\n        const parent = parentElementOrShadowHost(element);\n        if (parent) {\n            const parentEntry = append(parent);\n            parentEntry.children.push(element);\n        }\n        else {\n            roots.push(element);\n        }\n        entry = { children: [], taken: false };\n        elementToEntry.set(element, entry);\n        return entry;\n    }\n    elements.forEach(e => append(e).taken = true);\n    function visit(element) {\n        const entry = elementToEntry.get(element);\n        if (entry.taken)\n            result.push(element);\n        if (entry.children.length > 1) {\n            const set = new Set(entry.children);\n            entry.children = [];\n            let child = element.firstElementChild;\n            while (child && entry.children.length < set.size) {\n                if (set.has(child))\n                    entry.children.push(child);\n                child = child.nextElementSibling;\n            }\n            child = element.shadowRoot ? element.shadowRoot.firstElementChild : null;\n            while (child && entry.children.length < set.size) {\n                if (set.has(child))\n                    entry.children.push(child);\n                child = child.nextElementSibling;\n            }\n        }\n        entry.children.forEach(visit);\n    }\n    roots.forEach(visit);\n    return result;\n}\n\n\n/***/ }),\n\n/***/ \"./src/server/injected/textSelectorEngine.ts\":\n/*!***************************************************!*\\\n  !*** ./src/server/injected/textSelectorEngine.ts ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTextSelector = void 0;\nfunction createTextSelector(shadow) {\n    const engine = {\n        query(root, selector) {\n            return queryInternal(root, createMatcher(selector), shadow);\n        },\n        queryAll(root, selector) {\n            const result = [];\n            queryAllInternal(root, createMatcher(selector), shadow, result);\n            return result;\n        }\n    };\n    return engine;\n}\nexports.createTextSelector = createTextSelector;\nfunction unescape(s) {\n    if (!s.includes('\\\\'))\n        return s;\n    const r = [];\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === '\\\\' && i + 1 < s.length)\n            i++;\n        r.push(s[i++]);\n    }\n    return r.join('');\n}\nfunction createMatcher(selector) {\n    if (selector[0] === '/' && selector.lastIndexOf('/') > 0) {\n        const lastSlash = selector.lastIndexOf('/');\n        const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));\n        return text => re.test(text);\n    }\n    let strict = false;\n    if (selector.length > 1 && selector[0] === '\"' && selector[selector.length - 1] === '\"') {\n        selector = unescape(selector.substring(1, selector.length - 1));\n        strict = true;\n    }\n    if (selector.length > 1 && selector[0] === \"'\" && selector[selector.length - 1] === \"'\") {\n        selector = unescape(selector.substring(1, selector.length - 1));\n        strict = true;\n    }\n    selector = selector.trim().replace(/\\s+/g, ' ');\n    if (!strict)\n        selector = selector.toLowerCase();\n    return text => {\n        text = text.trim().replace(/\\s+/g, ' ');\n        if (!strict)\n            return text.toLowerCase().includes(selector);\n        return text === selector;\n    };\n}\n// Skips <head>, <script> and <style> elements and all their children.\nconst nodeFilter = {\n    acceptNode: node => {\n        return node.nodeName === 'HEAD' || node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE' ?\n            NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;\n    }\n};\n// If we are querying inside a filtered element, nodeFilter is never called, so we need a separate check.\nfunction isFilteredNode(root, document) {\n    return root.nodeName === 'SCRIPT' || root.nodeName === 'STYLE' || document.head && document.head.contains(root);\n}\nfunction queryInternal(root, matcher, shadow) {\n    const document = root instanceof Document ? root : root.ownerDocument;\n    if (isFilteredNode(root, document))\n        return;\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, nodeFilter);\n    const shadowRoots = [];\n    if (shadow && root.shadowRoot)\n        shadowRoots.push(root.shadowRoot);\n    let lastTextParent = null;\n    let lastText = '';\n    while (true) {\n        const node = walker.nextNode();\n        const textParent = (node && node.nodeType === Node.TEXT_NODE) ? node.parentElement : null;\n        if (lastTextParent && textParent !== lastTextParent) {\n            if (matcher(lastText))\n                return lastTextParent;\n            lastText = '';\n        }\n        lastTextParent = textParent;\n        if (!node)\n            break;\n        if (node.nodeType === Node.TEXT_NODE) {\n            lastText += node.nodeValue;\n        }\n        else {\n            const element = node;\n            if ((element instanceof HTMLInputElement) && (element.type === 'submit' || element.type === 'button') && matcher(element.value))\n                return element;\n            if (shadow && element.shadowRoot)\n                shadowRoots.push(element.shadowRoot);\n        }\n    }\n    for (const shadowRoot of shadowRoots) {\n        const element = queryInternal(shadowRoot, matcher, shadow);\n        if (element)\n            return element;\n    }\n}\nfunction queryAllInternal(root, matcher, shadow, result) {\n    const document = root instanceof Document ? root : root.ownerDocument;\n    if (isFilteredNode(root, document))\n        return;\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, nodeFilter);\n    const shadowRoots = [];\n    if (shadow && root.shadowRoot)\n        shadowRoots.push(root.shadowRoot);\n    let lastTextParent = null;\n    let lastText = '';\n    while (true) {\n        const node = walker.nextNode();\n        const textParent = (node && node.nodeType === Node.TEXT_NODE) ? node.parentElement : null;\n        if (lastTextParent && textParent !== lastTextParent) {\n            if (matcher(lastText))\n                result.push(lastTextParent);\n            lastText = '';\n        }\n        lastTextParent = textParent;\n        if (!node)\n            break;\n        if (node.nodeType === Node.TEXT_NODE) {\n            lastText += node.nodeValue;\n        }\n        else {\n            const element = node;\n            if ((element instanceof HTMLInputElement) && (element.type === 'submit' || element.type === 'button') && matcher(element.value))\n                result.push(element);\n            if (shadow && element.shadowRoot)\n                shadowRoots.push(element.shadowRoot);\n        }\n    }\n    for (const shadowRoot of shadowRoots)\n        queryAllInternal(shadowRoot, matcher, shadow, result);\n}\n\n\n/***/ }),\n\n/***/ \"./src/server/injected/xpathSelectorEngine.ts\":\n/*!****************************************************!*\\\n  !*** ./src/server/injected/xpathSelectorEngine.ts ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.XPathEngine = void 0;\nexports.XPathEngine = {\n    query(root, selector) {\n        const document = root instanceof Document ? root : root.ownerDocument;\n        if (!document)\n            return;\n        const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n        for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n            if (node.nodeType === Node.ELEMENT_NODE)\n                return node;\n        }\n    },\n    queryAll(root, selector) {\n        const result = [];\n        const document = root instanceof Document ? root : root.ownerDocument;\n        if (!document)\n            return result;\n        const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n        for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n            if (node.nodeType === Node.ELEMENT_NODE)\n                result.push(node);\n        }\n        return result;\n    }\n};\n\n\n/***/ })\n\n/******/ })[\"default\"];";
//# sourceMappingURL=injectedScriptSource.js.map